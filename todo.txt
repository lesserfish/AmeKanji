TODO:

----1 - Create a Template Class, alongside a static function to instantiate from a file / string XML file
2 - Create a method to load the input (Words or kanjis, and arguments) from an XML file or XML string and load them into a class AmeInput (or some other dumb name)
---3 - Create a Deck class, with a method to add a (Rendered) card into, given a template. That is: Input ( Card , Template ) -> RenderedCard -- (append to)--> Deck.
----    The method to render a Card given a template should occurr in the card itself. 
----    (?Â¿ Add the possibility to pass a SystemWide Map Table to the card, so that it can also render global level variables)
4 - Create the Web class, which should behave similarly to how the Parsers and the Regex are used. 
    In specific, we should pass a reference to a static function Web::GetMedia(Kard& kard, Args) to the Library class, so that it loads up.
    So far there should be two subclasses: One for Audio and one for KanjiStrokes. One should be able to create child subclasses of these in order to append 
    media methods upon each other. For example, construct a subclass VerbConjugation : public Audio, whose static method VerbConjugation::GetMedia invokes Audio::GetMedia.
    This way, you end up with both Audio and Verb Conjugations on the same card.
5 - Create the main loop of AmeKanji. The main loop should behave as:
    - LoadConfiguration
    - LoadFiles() // (Since this is the main loop, we are mostly loading the files before hand, sp we can send references to pugi::xml_document, or whatever any other class needs)
    - SetUp()     //  Creates instances of the required classes, and pass the referemces created in the previous step.
    - PreflightCheck // Checks if there is anything missing. Optional.
    - Execute()     // Executes the main loop. This loop iterates over every input in the class. For every entry, it invokes the parsers (dictionary parser, web parser, regex parser)
                    // depending on the configuration. 
                    // Multithreaded? (NO. The WebParser DOES need the card. It needs the hiragana / kanji in order to download the audio files. Perhaps multithreading should 
                    // apply to rendering several cards at the same time. (read up on thread pool: https://stackoverflow.com/questions/15752659/thread-pooling-in-c11)
    - RenderTemplates() // Render the given template for each card, and add the result to an AnkiDeck.
    - SaveDeckFile()    // Save the New Deck to a file (unless told otherwise). You can also add an options so that AmeKanji invokes a given given std::funcion<void(std::string>)
                        // with the DeckFile as a txt string.
6 - Implement the Edict Parser, Kanjidic parser, and NewKanjidic parser.
7 - Implement the Regex Parser for the Edict parser, Kanjidic parser and NewKanjidic parser.
7.5 (?) - Implement more UNIT testing. This should help clear up how exactly the API is going to be used.
8 - This should be it. Now begin implementing the AmeJS API so that you can use it later on. This shouldn't take more than a week.        








//
// old
Read Regex from XML file
Read Template from XML file

Create Regex Parser for JMDict.

Create Deck class and give it the attribute to be able to save itself to a file.

Create main loop of AmeKanji
||
||
|_=> With this we should have a working software, and be able to produce decks.

Then, create the AmeWeb library, so that we can download files

Conclude the remaining Dictionary Parsers

Then finish it off by creating assistant functions, so that using the API feels cleaner.

This will end development of AmeKanji

Then you can start with the JS Api.


Template:
<?xml version="1.0" encoding="UTF-8">
<template>
    <field>
        Kanji Writing: @kanji
        Hiragana Writing: @hiragana

        The level difficulty of this card is: @JLPTLVL
    </field>
</template>


class Ame
{

	ame_result loadConfigurationFromFile( ...
	ame_result loadConfigurationFromString( std::vector<string>  <- change this. new overload
	ame_result loadWordlistFromFile(....
	ame_result loadWordlistFromString( std::vector <stringZ
	ame_result loadTemplateFromFile(....
	ame_result loadTemplateFronString( std::vector <string>
	ame_result loadLibrary()
	template<class T....> ame_result loadLibrary()
	ame_result setParser(
	template<class T... > ame_result setParserManually(std::function<ame_result(T.....
	ame_result setWeb(....
	template<class T...> ame_result setWebManually( std::function<ame_result(....
	ame_result setRegex(...
	template<class T...> ame_result setRegexManually( ....
	ame_result createDeck(AnkiDeck &deck, std::vector<std::string>> Args .....
	
	ame_result SetUpCallback(std::function<void(callbackIno)> f)
	std::function<void(callbackInfo> callbackFunction; // Call this function on every step of the main loop.
}

class AnkiDeck
{
	std::string Fields;
	ame_result SaveToFile(...
	ame_result AsString(....

}

class Library
{
	loadConfiguration(....
	SetParserManually(....
	setParserAutomatically(....
	setWebManually(
	setWebAutomatically(....
	setRegexAutomatically
	setRegexManually
	ame_result PopulateCard(T &card, ....
	ame_result downloadMedia(T &card, std::string directory

}


/* Maybe?
    template<class T> AmeLibrary
    {
        public:
            ...
            ...

            // Sets parser manually
            ame_result setParser(std::function<ame_result(......
            {
                invokeParser = _invokeParser;
            }
            // Sets parser automatically
            ame_result setParser()
            {
                ...
                ...
                ...
            }

            // Sets args manually
            ame_result setArgs(std::vector<std::string> args)
            {
                ...
                ...
            }

            // Sets args automatically
            ame_result setArgs()
            {
                ...
                ...
            }

            ame_result populateCard(T &card, std::vector<std::string> input) {
                invokeParser(card, input, Args);
                ...
                ...
            }

        private:
            std::function<ame_result(T&, std::vector<std::string>, std::vector<std::string>) invokeParser;
            std::function<ame_result(T&, std::vector<std::string>, std::vector<std::string>) applyRegex;

            std:.vector<std::string> Args;
    }

/*

How I think this API should be used:

////
////
////

config.Dictionary = "JMDict";
AmeLibrary<Kanji> library(config);


library_result = library.Load();
if(!library_result.OK)
    return;

std::vector<Kanji> cardList;

for(auto& request in Requests)
{
    Kanji k;
    read_results r = library.populateCard(k, request);
    web_results w = library.downloadCardMedia(k, request);

    if(!r.OK || !w.OK)
        return;
    
    cardList.push_back(k);
}


AnkiDeck deck;
for(Kanji& k : cardList)
{
    AnkiCard card;
    for(Field& f : Template)
    {
        std::string field_str = k.RenderTemplate(f);
        Card.push_back(field_str);
    }
    deck.AddCard(card);
}


deck.save("New Anki Deck.txt");

////
////
////



Notice that on the previous thingy, the fact that we were working with objects of the class Kanji was never truly significant. So this leaves a possibility, for us to write:

void Ame::Run()
{
    ...
    ...
    ...
    switch(config.Mode)
    {
        case "Kanji":
            config.Dictionary = "JMdict";
            return Render<Kanji>();
    }
}

Template<Class T>
int Render()
{
    AmeLibrary<T> library(config);

    library_result = library.Load();
    if(!library_result.OK)
        return;

    std::vector<T> cardList;

    for(auto& request : Requests)
    {
        T c;
        // 
        read_results r = library.populateCard(*c, request);
        web_results w = library(*c);

        if(!read_results.OK || !web_results.OK)
            return;
        
        cardList.push_back(c);
    }

    AnkiDeck deck;
    for(T& c : cardList)
    {
        AnkiCard card;
        for(Field& f : Template)
        {
            std::string field_str = c.RenderTemplate(f);
            Card.push_back(field_str);
        }
        deck.AddCard(card);
    }


    deck.save("New Anki Deck.txt");

}
*/
